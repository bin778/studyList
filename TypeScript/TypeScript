자바스크립트의 탄생
1995년 넷스케이프의 브랜든 아이크는 웹의 다양한 콘텐츠를 표현하기 위해 이미지, 플러그인 요소를 쉽게 조합할 수 있는 새로운 언어가 필요하다고 생각해 만든 것이 자바스크립트(JavaScript)이다.
자바스크립트는 C, Java와 유사한 기본 문법을 가지고 있으며 객체 지향 언어인 셀프의 프로토타입 상속 개념과 Lisp 계열 언어 중 하나인 스킴(Scheme)의 일급 함수 개념을 차용한 경량의 프로그래밍 언어이다.

ECMAScript의 탄생
당시 초기의 자바스크립트는 새로운 기능이 추가되는 형태로 발전됐다. 그러나 표준화가 되지 않아 두 개의 스크립트를 따로 개발하는 어려움을 겪어야만 했다.
따라서 브라우저 호환성을 고민하지 않고 한 번에 개발할 수 있는 라이브러리가 필요했다. 
그러나 언제까지나 이런 라이브러리에 기대어 웹 페이지가 제대로 동작되지 않는 크로스 브라우징(Cross Browsing) 이슈를 해결할 수는 없었고 모든 브라우저에서 동일하게 동작되는 표준화된 스크립트가 필요했다.
넷스케이프는 컴퓨터 시스템의 표준을 관리하는 Ecma 인터내셔널(국제 표준화 기구)에 자바스크립트의 표준화를 위한 자바스크립트 기술 규격을 제출했고, Ecma 인터내셔널은 ECMAScript라는 이름으로 자바스크립트 표준화를 공식화했다.

웹 사이트와 웹 애플리케이션의 차이
웹 사이트는 정적인 웹이다. 단방향으로 정보를 제공하기 때문에 사용자와 상호 작용하지 않으며 콘텐츠가 동적으로 업데이트되지 않는다.
웹 애플리케이션은 사용자와 상호작용하는 쌍방향 소통의 웹을 말한다. 검색, 댓글, 채팅, 추천 기능 등 웹 페이지 내부에서 수많은 애플리케이션이 동작하고 있기 때문에 웹 애플리케이션이라고 부른다.

웹 애플리케이션의 발전
대규모 웹 서비스 개발의 필요성이 커지면서 하나의 웹 페이지를 통으로 개발하는 것이 아니라, 컴퓨넌트 단위로 개발하는 방식이 생겨났다.
또 Ajax로 페이지 전체를 새로고침하지 않아도 자바스크립트의 비동기 요청으로 페이지의 일부 데이터를 로드할 수 있다.
서비스 규모가 커짐에 따라 다뤄야 하는 데이터가 늘어났고, 표현해야 하는 화면도 다양하고 복잡해졌고, 최적화할 디바이스도 다양해졌다.

CBD 방법론
재사용할 수 있는 컴포넌트를 개발 또는 조합해서 하나의 애플리케이션을 만드는 개발 방법론을 말한다.
CBD는 서비스에서 다루는 데이터를 구분하고 그에 맞는 UI를 표현할 수 있게 컴포넌트 단위로 개발하는 접근방식이다.
요즘은 작은 컴포넌트를 조합해서 큰 컴포넌트로 만들어가는 방식이 주류가 되었다.

자바스크립트의 한계
자바스크립트는 동적 타입 언어이다. 따라서 변수에 타입을 지정하기 않기 방식이기 때문에 변수값이 할당될 때 해당 값의 타입에 따라 변수의 타입이 결정된다는 것이다.
예를 들어 변수 a의 타입이 number인지 string인지는 실제 코드가 동작해야 a에 값이 할당되는 순간, 그 값이 1인지 '1'인지에 따라 결정된다.

이러한 문제는 자바스크립트의 관대함으로 인해 문제가 발생할 수 있다.
예를 들어 2개의 숫자 인자를 전달해야 할 함수가 숫자 하나만 넣거나 문자열을 넣을 때 오류없이 NaN을 반환한다는 것이다. 
개발자의 의도와 다르게 동작할 수 있다는 것이다. 자바스크립트는 동적 타입 언어라 관대하기 때문이다.
a, b를 인자값으로 전달할 때 b가 undefined일 때도 오류가 발생하지 않고 NaN으로 형변환해서 실행된다.
따라서 자바스크립트는 타입 에러나 런타임 에러가 발생하면 찾기 어렵기 때문에 안정성이나 개발 생산성이 떨어지게 된다.

타입스크립트의 탄생
시간이 지나 마이크로소프트는 자바스크립트의 슈퍼셋(Superset) 언어인 타입스크립트를 공개해 기존 언어에 새로운 기능과 문법을 추가해서 단점을 보완하였다.
자바스크립트에 비해 안전성 보장(정적 타입 언어), 개발 생산성 향상, 협업에 유리, 자바스크립트에 점진적으로 적용 가능하는 장점을 가졌기 때문에 많은 환영을 받았다.
