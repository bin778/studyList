모든 프로그래밍 언어는 변수를 선언하는 것부터 시작된다.
변수는 값을 저장하는 공간이다.

자바스크립트는 7가지 데이터 타입을 명시한다.
undefined, null, Boolean(참/거짓), String(문자열), Symbol, Numberic(Number, BigInt)
데이터 타입은 여러 종류의 데이터를 식별하는 분류 체계로 컴파일러에 값의 형태를 알려준다.

타입스크립트는 모든 TS파일을 하나의 모듈로 인식 하기 때문에 모듈 내에서 동일한 이름의 변수를 선언할 수 없다.
또한 타입스크립트는 변수의 타입이 서로 다르면 매개변수에 전달할 수 없다.
자바스크립트를 사용했다면 변수와 값을 다룰 때 타입을 고려할 필요가 없다.

정적 타입 시스템에서는 모든 변수 타입이 컴파일 타임에 결정된다.
C, 자바, 타입스크립트같은 언어는 정적 타입 언어에 속한다.
코드 작성할 때 번거롭지만 컴파일 과정에서 타입 에러를 발견하기 쉽다.

동적 타입 시스템에서는 런타임에서 알아서 결정한다.
파이썬, 자바사크립트같은 언어는 동적 타입 언어에 속한다.
타입이 없어 유연하지만 프로그램에 오류가 발생하면 어디서 타입 에러가 발생했는데 발견하기 어렵다.

컴파일(Compile): 컴퓨터가 코드를 이해할 수 있도록 기계어로 변환하는 과정
런타임(Runtime): 변환된 파일이 메모리에 적재되어 실행되는 과정

암묵적 타입 변환 여부에 따라 타입 시스템을 강타입 언어와 약타입 언어로 구분할 수 있다.
강타입 언어: 서로 다른 타입을 갖는 값끼리 연산을 시도하면 컴파일 또는 인터프리터 과정에서 오류가 발생한다.
ex) 파이썬, 루비, 타입스크립트
약타입 언어: 서로 다른 타입을 갖더라도 컴파일 또는 인터프리터 과정에서 자동으로 변환하여 연산을 한다.
ex) C++, 자바, 자바스크립트

결론적으로 타입스크립트가 만들어진 이유는 사람이 이해하기 쉬운 방식으로 코드를 작성하기 위해서가 아니다.
자바스크립트는 고타입 언어이기 때문에 타입 언어를 잡기 어렵기 때문에 타입스크립트에서 런타임 에러를 잡기 위해서다.

타입 에너테이션(Type Annotation)이란 변수나 상수 혹은 함수의 인자와 반환 값에 타입을 명시적으로 선언해서 어떤 타입 값이 저장될 것인지를 컴파일러에 직접 알려주는 문법이다.
타입스크립트는 기존 자바스크립트 코드에 점진적으로 타입을 적용할 수 있는 특성을 가지고 있다.
하지만 타입을 제거하면 타입스크립트 타입 시스템이 타입 추론을 하는 과정에서 어려움을 겪을 것이다.

집합으로 나타낼수 있는 타입스크립트의 타입 시스템을 지탱하고 있는 개념이 바로 구조적 서브타이핑(Structural Subtyping)이다.
구조적 서브타이핑이란 객체가 가지고 있는 속성을 바탕으로 타입을 구분하는 것이다.

타입스크립트는 점직적으로 타입을 확인하기 때문에 any를 사용하며 타입 선언을 생략하면 암시적 타입 변환이 일어난다.
그러나 컴파일타임에 타입이 올바르게 정해지지 않으면 런타임에서 에러가 발생한다.

값은 프로그램을 처리하기 위해 메모리에 저장하는 모든 데이터이다.
프로그래밍 관점에서는 문자열, 숫자, 변수, 매개변수 등이 있다.
값은 어떤한 식을 연산한 것으로 변수에 할당할 수 있다.
타입스크립트는 변수, 매개변수, 객체 속성 등에 : type 형태로 타입을 명시한다.
또는 type이나 interface 키워드로 커스텀 타입을 정의할 수 있다.

클래스와 마찬가지로 enum 또한 런타임의 객체로 변환하는 값이다.
enum은 런타임에 실체 객체로 존재하며, 함수로 표현할 수도 있다.

타입스크립트에서 typeof, instanceof 그리고 타입 단언을 사용해서 확인할 수 있다.
typeof는 연산하기 전에 피연산자의 데이터 타입을 나타내는 문자열을 반환한다.
typeof는 7가지 데이터 타입(Boolean, null, undefined, Number, BigInt, String, Symbol)과 함수(Function), 호스트 객체 그리고 object 객체가 될 수 있다.
