프로그래밍 언어는 고수준(high-level) 언어와 저수준(low-level) 언어로 구별할 수 있다. 
사람이 이해하기 쉬운 형식의 언어는 고수준 언어라고 하며, 컴퓨터가 이해하기 쉬운 형식의 언어는 저수준 언어라고 한다.

일반적으로 고수준 언어를 저수준 언어로 변경해주는 것을 컴파일이라고 한다.
컴파일은 소스코드가 컴파일 과정을 거쳐 컴퓨터가 인식할 수 있는 기계어 코드로 변환되어 실행할 수 있는 프로그램이 되는 과정을 의미한다.
런타임은 컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행되는 과정을 의미한다.

타입스크립트는 TS코드에서 JS코드로 컴파일한다. 
이는 일반적인 컴파일과 다르게 고수준 언어에서 고수준 언어로 변환하는 것이기 때문에 컴파일이 아닌 트랜스파일(Transpile)이라고 부르기도 한다. 
그렇지만 좁은 의미의 컴파일과 트랜스파일을 통틀어 컴파일이라고 부르기도 한다.
타입스크립트 컴파일러는 소스코드를 해석하여 AST(최소 구문 트리)를 만들고 이후 타입 확인을 거친 다음에 결과 코드를 생성한다.

타입스크립트 컴파일러가 소스코드를 컴파일하여 프로그램이 실행되기까지의 과정을 정리하면 다음과 같다.
1. 타입스크립트 소스코드를 타입스크립트 AST로 만든다. (TSC)
2. 타입 검사기가 AST를 확인하여 타입을 확인한다. (TSC)
3. 타입스크립트 AST를 자바스크립트 소스로 변환한다. (TSC)
4. 자바스크립트 소스코드를 자바스크립트 AST로 만든다. (런타임)
5. AST가 바이트 코드로 변환된다. (런타임)
6. 런타임에서 바이트 코드가 평가되어 프로그램이 실행된다. (런타임)

타입스크립트 소스코드의 타입은 1~2단계에서만 사용된다. 타입 정보는 단지 타입을 확인하는데만 쓰이며, 최종적으로 만들어지는 프로그램에는 아무런 영향을 주지 않는다.
타입스크립트는 컴파일 타임에 타입을 검사하기 때문에 에러가 발생하면 프로그램이 실행되지 않는다.
이러한 특징 때문에 타입스크립트를 컴파일 타임에 에러를 발견할 수 있는 정적 타입 검사기(Static Type Checker)라고 부른다.

타입스크립트 컴파일러는 타입스크립트 소스가 자바스크립트 소스로 변환되는 모든 과정을 보여준다.
- 코드 검사기로서의 타입스크립트 컴파일러
타입스크립트 컴파일러는 정적 분석을 통해 코드를 분석하여 에러를 검출하며, 코드를 실핼하기 전에 자바스크립트 런타임에서 발생할 수 있는 에러를 사전에 알려준다.
타입스크립트 컴파일러는 TSC를 사용하여 타입 검사를 하며, 컴파일 타임에 타입 오류를 발견한다. 타입 검사를 거쳐 코드를 안전하게 만든 이후에는 타입스크립트 AST를 자바스크립트 코드로 변환한다.
- 코드 변환기로서의 타입스크립트 컴파일러
타입스크립트 컴파일러는 타입스크립트 코드를 각자의 런타임 환경에서 동작할 수 있도록 구버전의 자바스크립트로 트랜스파일한다. TS를 파싱하고 JS로 변환해야 비로소 실행할 수 있기 때문이다.
타입스크립트 컴파일러는 타입 검사를 수행한 후 코드 변환을 시작하는데, 이때 타입 오류가 있더라도 일단 컴파일을 진행한다. TS코드가 JS코드로 변환되는 과정은 타입 검사와 독립적으로 동작하기 때문이다.
컴파일 이후에는 타입이 제거되어 순수한 JS 코드만 남는다.

타입스크립트 컴파일러는 5단계를 거쳐 타입 검사와 자바스크립트 코드 변환을 진행한다.
1. 프로그램
타입스크립트 컴파일러는 tsconfig.json 파일에 명시된 컴파일 옵션을 기반으로 컴파일을 수행한다. 
전체적인 컴파일 과정을 관리하는 프로그램 객체가 생성되고, 이 객체는 컴파일할 TS 소스파일과 소스 파일 내에서 임포트된 파일을 불러오는데, 가장 최초로 불러온 파일을 기준으로 컴파일 과정이 시작된다.

2. 스캐너(Scanner)
첫 번재 단계는 스캐너이다. 
스캐너는 TS 소스파일을 어휘적으로 분석(lexical analysis)하여 토큰(token)을 생성하는 역할을 한다. 쉽게 말해 소스 코드를 의미있는 단위로 단어를 쪼개는 것을 말한다(.ts 토큰화).

3. 파서(Parser)
스캐너가 소스 파일을 토큰으로 나눠주면, 파서는 토큰 정보를 이용하여 AST를 생성한다. 파서는 생성된 토큰 목록을 활용하여 구문적 분석(Syntax analysis)을 수행한다. 
이를 통해 실질적인 구조를 노드 단위의 트리 형태로 표현하고, 각각의 노드는 코드상의 위치, 구문 종류, 코드 내용과 같은 정보를 담는다(토큰 기반 AST 생성).

4. 바인더(Binder)
바인더는 체커 단계에서 타입 검사를 할 수 있도록 기반을 마련해주는 것으로 타입 검사를 위해 심볼(Symbol)이라는 데이터 구조를 생성한다. 
심볼은 AST의 각 노드에 대응하는 선언된 타입의 노드 정보를 저장한다(AST 노드 기반 심볼 생성).

5. 체커(Checker)
체커의 주요 역할은 AST의 노드를 탐색하면서 심볼 정보를 불러와 주어진 소스 파일에 대해 타입 검사를 진행하는 것이다(AST + 심볼 기반 타입 검사).

6. 이미터(Emitter)
이미터의 주요 역할은 TS 소스 파일을 변환하는 것으로 TS 소스파일(.ts)을 JS 소스파일(.js)과 타입 선언 파일(.d.ts)로 생성한다.
TS 소스 파일을 변환하는 과정에서 개발자가 설정한 타입스크립트 설정 파일을 읽어오고, 체커를 통해 코드에 대한 타입 검증 정보를 가져온다.
그리고 emitter.ts 소스 파일의 내부의 emitFiles 함수를 사용하여 TS 소스 변환을 진행한다(AST + 코드 기반 .js 생성).
