조건부 타입은 조건에 따라 다른 타입을 반환해야할 때 조건부 타입을 이용해 출력 타입을 다르게 도출할 수 있다.
자바스크립트의 삼항연산자와 동일하게 조건 ? A : B의 형태를 가진다.

조건부 타입이 필요한 이유?
조건부 타입은 타입스크립트의 강력한 기능 중 하나로, 입력된 타입에 따라 반환되는 타입이 달라지는 유연성을 제공한다.
왜냐하면 조건부 타입을 활용하면 복잡한 타입 연산과 타입 가드를 수행할 수 있기 때문이다.
조건부 타입은 코드의 안정성과 타입의 유연성 둘 다 높여주기 때문에 중요하다고 볼 수 있다.

extends 조건부 타입을 활용하여 개선하기
제네릭과 extends를 함께 사용해서 제네릭으로 받는 타입을 제한하면 잘못된 값을 넘길 수 없기 때문에 휴먼 에러를 방지할 수 있다.
extends를 활용해서 조건부 타입을 설정하면 사용자가 원하는 값으로 반환값을 구체화할 수 있으므로 불필요한 타입가드나 타입 단언을 방지할 수 있다.

infer를 활용한 조건부 타입
extends를 사용할 때, infer 키워드를 사용할 수 있다.
infer는 추론하다는 의미를 지니고 있는데 타입스크립트에서 또한 타입을 추론하는 역할을 한다.
삼항 연산자를 사용한 조건문의 형태를 가지는데, extends로 조건을 서술하고 infer로 타입을 추론하는 방식을 취한다.

라우팅(Routing): 웹 애플리케이션에서 사용자가 URL을 통해 다른 페이지로 이동하거나, 다른 경로에 대한 요청을 처리하는 방법을 정의한다.

유니온 타입
타입스크립트에서는 유니온 타입을 사용해 변수 타입을 특정 문자열로 지정할 수 있다.

템플릿 리터럴 타입
타입스크립트 4.1 부터는 이를 확장하는 방법인 템플릿 리터럴 타입을 지원하기 시작한다.
템플릿 리터럴 타입은 자바스크립트의 템플릿 리터럴 문법을 사용해서 특정 문자열에 대한 타입을 선언할 수 있는 기능이다.

템플릿 리터럴 사용 시 주의할 점
타입스크립트 컴파일러가 유니온을 추론하는 데 시간이 오래걸리면 비효율적이기 때문에 타입스크립트가 타입을 추론하지 않고 에러를 내뱉을 때가 있다
그래서 템플릿 리터럴 타입에 삽입된 유니온 조합의 경우의 수가 너무 많지 않도록 적절하게 나눠서 타입을 정의하는 것이 좋다

커스텀 유틸리티 타입
표현하기 힘든 타입을 작성할 때 타입스크립트에서 제공하는 유틸리티 타입만으로는 표현하는데에 한계를 느낄 때가 있다.
이럴 때 유틸리티 타입을 활용해 커스텀 유틸리티 타입을 제작하면 된다.

유틸리티 함수를 활용해 styled-components의 중복 타입 선언 피하기
리액트 컴포넌트 구현 시 여러 옵션을 props로 받아서 유연한 컴포넌트를 만들 수 있다.
이 때 styled-components에도 props가 전달되는데 컴포넌트가 props에서 받은 타입과 동일할 때가 대부분이기 때문에 중복 코드가 발생하고 둘 중 하나의 타입이 변경되면 일일이 수정해줘야하는 번거로움이 있다.
이 경우 타입스크립트에서 제공하는 Pick, Omit 같은 유틸리티 타입을 활용해서 코드를 간결하게 작성할 수 있다.

PickOne 유틸리티 함수
타입스크립트에는 서로 다른 2개 이상의 객체를 유니온 타입으로 받을 때 타입 검사가 제대로 진행되지 않는 이슈가 있다.
이럴 때 유틸리티 타입을 활용해 커스텀 유틸리티 타입을 제작하면 된다.

NonNullable 타입 검사 함수를 사용해 간편하게 타입 가드하기
타입 가드는 타입스크립트에서 많이 사용되는데특히 자주 사용되는 타입 가드 패턴 중 하나는 null을 가질 수 있는 Nullable값의 null처리이다.
일반적으로 if 문을 사용해서 null 처리 타입가드를 적용하지만, is 키워드와 NonNullable 타입으로 타입검사를 위한 유틸함수를 만들어서 사용할 수도 있다.
