상태(State)
상태란 시간이 지나면서 변할 수 있는 동적인 데이터로 값이 변경될 때마다 컴포넌트의 렌더링 결과물에 영향을 준다.
상태는 지역 상태, 전역 상태, 서버 상태로 분류할 수 있다.
리액트 내부 API만으로 상태를 관리할 수 있지만 성능 문제와 상태의 복잡성으로 인해 외부 상태 관리 라이브러리를 주로 활용한다.

지역상태
컴포넌트 내부에서 관리되는 상태로 주로 useState훅, useReducer훅에 의해 관리된다.

전역 상태
앱 전체에서 공유하는 상태를 의미한다. 여러 개의 컴포넌트가 전역 상태를 사용할 수 있으며 상태가 변경되면 전역 상태의 데이트를 사용하는 컴포넌트들이 업데이트 된다. 
또한 Prop drilling 문제를 피할 때 지역 상태를 전역 상태로 공유할 수 있다.

서버 상태
외부 서버에 저장해야 하는 상태들을 의미한다. UI 상태와 결합하여 관리하게 되며 로딩 여부나 에러 상태 등을 포함한다. 
최근에는 react-query, SWR과 같은 외부 라이브러리를 사용하여 관리하기도 한다.

상태를 잘 관리하기 위한 가이드
상태를 잘못 관리하면 애플리케이션의 복잡성을 증가시키고 동작을 예측하기 어렵게 만든다.
또한 상태가 업데이트될 때마다 리렌더링이 발생하기 때문에 유지 보수 및 성능 관점에서 상태의 개수를 최소화하는 것이 좋다.
상태를 잘 관리하기 위한 2가지 고려 사항
1. 시간이 지나도 변하지 않는다면 상태가 아니다.
2. 파생된 값은 상태가 아니다.

Context API
컨텍스트 API는 다른 컴포넌트들과 데이터를 쉽게 공유하기 위한 목적으로 제공되는 API로, Prop Drilling과 같은 문제를 해결하기 위한 도구로 활용된다.
상위 컴포넌트 구현부에 Context Provier를 넣어주고, 하위 컴포넌트에서 해당 Context를 구독하여 데이터를 읽어오는 방식으로 사용할 수 있다.
컨텍스트 API 관련한 또 하나의 팁은 유틸리티 함수를 정의하여 더 간단한 코드로 컨텍스트와 훅을 생성하도록 만드는 것이다.
컨텍스트 API는 엄밀하게 말하면 전역 상태를 관리하기 위한 솔루션이라기보다 여러 컴포넌트 간에 값을 공유하는 솔루션에 가깝다. 
useState나 useReducer와 결합하여 상태를 공유하고 관리하도록 설계할 수 있다.

Mobx
객체 지향 프로그래밍과 반응형 프로그래밍 패러다임의 영향을 받은 라이브러리다.
장점: 상태 변경 로직을 단순하게 작성할 수 있다.
      복잡한 업데이트 로직을 라이브러리에 위임할 수 있다.
단점: 데이터가 언제 어떻게 변하는지 추적하기 어렵다.
      트러블 슈팅에 어려움을 겪을 수 있다.

Redux
Redux는 함수형 프로그래밍의 영향을 받은 라이브러리다.
장점: 특정 UI 프레임워크에 종속되지 않아 독립적으로 상태 관리 라이브러리를 사용할 수 있다.
      오랜 기간 사용되어 다양한 요구사항에 대해 충분히 검증되었다.
      상태 변경 추적에 최적화 되어 있어, 특정 상황에서 발생한 애플리케이션 문제의 원인을 파악하는데 용이하다.
단점: 단순한 상태 설정에도 많은 보일러플레이트가 필요하다.
      사용 난이도가 높다.

Recoil
Recoil은 상태를 저장할 수 있는 Atom과 해당 상태를 변형할 수 있는 순수 함수 selector를 통해 상태를 관리하는 라이브러리다.
장점: 보일러플레이트가 적다.
      난이도가 낮아 배우기 쉽다.
단점: 라이브러리가 아직 실험적인 상태이기 때문에 다양한 요구 사항에 대한 검증이 이루어지지 않았다.

Zustand
Zustand는 Flux 패턴을 사용하는 상태관리 라이브러리다.
장점: 보일러플레이트가 적다.
      훅 기반의 편리한 API 모듈을 제공한다.
      클로저를 활용하여 스토어 내부 상태를 관리함으로써 특정 라이브러리에 종속되지 않는다.
단점: 커뮤니티와 생태계가 redux와 비교해서 작다.
      middleware 및 플러그인의 부재로 인해 확장성이 부족할 수 있다.
