Ambient 타입 선언
Ambient 타입 선언은 TS의 컴파일러에게 타입 정보를 알려주거나 확장하기 위해 사용하는 방법이다.
주로 .d.ts 확장자를 가진 파일에서 하는 타입 선언을 가리킨다. .d.ts 확장자를 가진 파일에서는 타입 선언만 할 수 있으며 값을 표현할 수는 없다.

Ambient 타입 선언을 이용한 모듈 추가
TS는 *.js 또는 *.ts 파일만 이해하며 그 이외의 다른 파일 형식은 인식하지 못한다. 따라서 알지 못하는 파일 형식을 모듈로 가져오려고 하면 에러가 발생한다.

자바스크립트로만 작성된 라이브러리 타입 정보 추가
npm에 타입 정보를 제공하지 않는 자바스크립트 라이브러리를 사용하는 경우 타입을 추론할 수 없기 때문에 임포트한 모듈은 기본적으로 모두 any로 추론될 것이다. 
만약 tsconfig.json 설정으로 any를 사용하지 못하게 설정했다면 프로젝트가 빌드되지 않을 것이다.

이때 앰비언트 타입을 사용하여 해당 라이브러리의 타입 정보를 TypeScript에 제공할 수 있다.
.d.ts 확장자를 가진 파일을 검색하여 타입 검사를 진행하고, VSCode와 같은 코드 편집기 또한 이 정보를 토대로 유용한 타입 힌트를 제공한다.

별도로 타입 정보를 제공하는 자바스크립트 라이브러리는 보통 @types/패키지명을 통해 추가할 수 있다. 
tsc는 별도의 설정 없이도 node_modules /@type 디렉터리에 있는 타입 선언을 타입 검사에 활용한다.

즉 Ambient 타입 선언은 TS에게 JS코드 안에는 이러한 정보들이 있어라고 알려주는 도구라고 이해하면 된다.

타입스크립트로 작성된 라이브러리
타입스크립트로 작성된 라이브러리라도 배포할 때엔 JS파일과 .d.ts 파일로 배포하는 것이 일반적이다. 

JS 어딘가에 전역 변수가 정의되어 있음을 TS에게 알릴 때
타입스크립트로 직접 구현하지 않았지만, 실제 자바스크립트 어딘가에 전역 변수가 정의되어 있는 상황을 타입스크립트에게 알릴 때 Ambiet 타입 선언을 사용할 수 있다.

예를 들어 웹뷰를 개발할 대 네이티브 앱과의 통신을 위한 인터페이스를 네이티브 앱이 Window 객체에 추가하는 경우가 많다.
이렇게 전역 객체인 Window에 변수나 함수를 추가하면 TS에서 직접 구현하지 않았더라도 실제 런타임 환경에서 해당 변수를 사용할 수 있다.

Ambient 타입 선언시 주의점
타입스크립트로 만드는 라이브러리에는 불필요: tsconfig.json의 declaration을 true를 설정하면 타입스크립트 컴파일러가 .d.ts파일을 자동으로 생성해주기 때문에 수동으로 .d.ts 파일을 작성할 필요가 없다.
전역으로 타입을 정의하여 사용할 때 주의할 점
서로 다른 라이브러리에서 동일한 이름의 Ambient 타입 선언을 한다면 충돌이 발생하여 어떤 타입 선언이 적용될지 알기 어려우며, 의도한대로 동작하지 않을 수 있다.
또한 import, export 등을 하지 않고 사용하기 때문에 코드의 의존성 관계가 명확하지 않아 나중에 변경할 때 어려울 수 있다.

Ambient 타입 선언을 잘못 사용했을 때의 문제점
.ts 파일 내에서 Ambient 타입 선언은 개발자에게 혼란을 야기한다. 
import, export 등을 하지 않고 사용하기 때문에 코드의 의존성 관계가 명확하지 않기 때문에 변경에 의한 영향 범위를 파악하기 어렵다. 
따라서 .d.ts 파일 이외에서 Ambient 타입 선언은 일반 타입 선언과 섞이게 되면 Ambient 선언이 어떤 파일에 포함되어 있는지 파악하기 어려워 유지보수를 어렵게 만든다.

Ambient 타입 활용하기
1. 타입을 정의하여 import 없이 전역으로 공유
2. declare type 활용하기
3. declare module 활용하기
4. declare namespace 활용하기
5. declare global 활용하기
6. declare와 번들러의 시너지

스크립트와 설정 파일 활용하기
1. 실시간으로 타입 검사하기
실시간으로 에러를 확인하는 방법은 다음의 tsconfig옵션을 사용하는 것이다.
yarn tsc -noEmit -incremental -w
- noEmit 옵션은 JS파일을 생성하지 않도록 설정하는 것이다.
- incremental 옵션은 증분 컴파일을 활성화하여 컴파일 시간을 단축할 수 있다.
- w는 watch로 파일 변경 사항을 모니터링하도록 활성화하는 옵션이다.

2. 타입 커버리지 확인하기
npx type-coverage -detail
타입스크립트로 마이그레이션 중인 프로젝트나 레거시 코드가 많은 프로젝트를 다룰 때 타입 커버리지를 체크함으로써 더 나은 코드 퀄리티로 리팩터링하기 위한 기반을 마련하는 데 도움이 되는 정략적인 지표를 얻을 수 있다.

타입스크립트 설정 파일 활용하기
앞서 설명한 incremental 옵션을 tsconfig에서 직접적으로 설정할 수 있다. 이를 true로 변경하면 증분 컴파일이 활성화되어 변경된 부분만 컴파일하게 된다.

에디터 활용하기
때로는 정의된 타입이 있는 개체인데도 import되지 않거나 자동 완성 기능이 동작하지 않을 때, 이런 상황에서 타입스크립트 서버를 재실행하면 된다.
VSCode에서 Restart TS server 기능을 지원하는데 윈도우: ctrl+ shift + p, 맥: command + shift + p를 누르고 실행하면 된다.

타입스크립트 마이그레이션
마이그레이션은 JS코드를 TS코드로 변환하는 작업이다. 반드시 기존의 JS 코드를 TS로 마이그레이션 해야만 하는 것은 아니다. 
프로젝트 상황에 따라 기존의 프로젝트를 마이그레이션하는 것보다 새로 구축하는 것이 나을 수도 있기 때문이다.
기존 프로젝트를 신규 프로젝트로 바꾸는게 나을지 TS코드로 마이그레이션하는 게 나을지를 신중하게 따져봐야 한다.

점진적인 마이그레이션
작은 부분부터 마이그레이션을 시작할 수 있어 진입 장벽이 낮아지고 프로젝트의 전반적인 동작을 안정적으로 유지할 수 있다.
하지만 단순히 allowJS: true, noImplicitAny: false로 설정한 채 무기한으로 마이그레이션을 미루는 것은 지양해야 한다. 
따라서 점진적인 마이그레이션을 진행한다면, 프로젝트 참여자와 우선순위를 대략적이라도 설정해두면 좋다.

마이그레이션 진행 단계
1. TS 개발 환경 설정, 빌드 파이프라인에 TS 컴파일러를 통합한다. 또한 tsconfig.json 파일에서 allowJS: true, noImplicitAny: false로 설정한다.
2. 작성된 JS 파일을 TS 파일로 변환한다. 필요한 타입과 인터페이스를 하나씩 정의하며 함수 시그니처를 추가해 나간다.
3. 작업이 완료되었다면 tsconfig.json 파일에서 allowJS: false, noImplicitAny: true로 재설정 한다.

allowJS
기본값은 false로 자바스크립트 파일을 컴파일할 때 사용하는 옵션이다. 
기존 JS 함수를 TS에서 임포트 하거나 반대로 타입스크립트 함수를 자바스크립트에서 임포트 할수 있게 해준다.
즉 JS코드에서 TS코드를 혼합하여 사용하는 것을 허락해주어 점진적으로 변경할 수 있도록 한다.

noImplicitAny
암시적 any 타입의 허용 여부를 설정하는 옵션이다. 
보통 타입 안정성을 위해 true로 설정하여 암시적 any를 허용하지 않는다. 
타입을 점진적으로 추가하는 과정에서 오류가 발생하지 않도록 noImplicitAny를 false로 설정해야한다.

모노레포
모노레포(Monorepo)란 버전 관리 시스템에서 여러 프로젝트를 하나의 레포지토리로 통합하여 관리하는 소프트웨어 개발 전략이다. 
모노레포를 사용하면 개발 환경 설정도 통합할 수 있어서 더 효율적인 관리가 가능해진다. 요즘은 많은 프로젝트에서 모노레포를 채택하고 있다.

모노레포의 장점
Lint, CI/CD 등 개발 환경 설정을 통합적으로 관리하기 때문에 불필요한 코드 중복을 줄여준다.
공통 모듈이 동일한 프로젝트 내에서 관리되므로, 별도의 패키지 관리자를 통해 모듈을 관리하지 않아도 된다. 이에 따라 기능 변화를 쉽게 추적하고 의존성을 관리할 수 있다.

모노레포의 단점
레포지토리가 거대해질 수 있다.
여러 팀의 이해관계가 얽혀 소유권과 권한 관리가 복잡해질 수 있다.
여러부서에서 관리하다 보니 깃 로그를 읽고 변경 내역을 빠르게 파악하기 어렵다.
