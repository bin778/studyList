타입스크립만이 가지고 있는 독자적인 타입 시스템
any 타입: 자바스크립트에 존재하는 모든 값을 오류 없이 받을 수 있다.
즉, 자바스크립트에서의 기본적인 사용 방식과 같으므로 타입을 명시하지 않은 것과 동일한 효과를 낸다.

타입스크립트를 사용해야 하는 경우
1. 개발 단계에서 임시로 값을 지정해야 할 때
2. 어떤 값을 받아올지 또는 넘겨줄지 정할 수 없을 때
3. 값을 예측할 수 없을 때 암묵적으로 사용

다만 any 타입 사용은 지양하는 것이 좋다. 왜냐하면 타입 검사를 무색하게 만들고 잠재적인 에러를 초래할 수 있기 때문이다.

unknown 타입
unknown 타입은 any 타입과 유사하게 모든 타입의 값이 할당될 수 있다.
그러나 any 타입 외에 다른 타입으로 선언된 변수에는 unknown 타입 값을 할당할 수 없다.

unknown 타입으로 할당된 변수는 어떤 값이든 올 수 있음을 의미하지만 개발자에게 엄격한 타입 검사를 강제하기도 한다.
any 타입은 어떤 값이든 허용되기 때문에 특정 타입으로 수정해야 하는 것을 깜빡하고 누락하면 치명적인 에러가 발생한다.
unknown 타입은 이러한 상황을 보완하기 위해 타입 검사를 강제하고 타입이 식별된 후 사용할 수 있기 때문에 any 타입보다 더 안전하다.

void 타입
자바스크립트에서는 함수가 return을 하지 않으면 undefined가 반환된다.
하지만 타입스크립트에서는 void 타입이 사용되는데 이것은 undefined가 아니다.
타입스크립트에서는 함수가 어떤 값을 반환하지 않으면 void를 지정하여 사용한다고 생각하면 된다.

never 타입
never 타입 또한 일반적으로 함수와 관련하여 많이 사용되는 타입이다.
never라는 단어가 내포하는 있는 의미처럼 never 타입은 값을 반환할 수 없는 타입을 말한다.

값을 반환할 수 없는 경우
1. 에러를 던지는 경우
throw 키워드를 사용하면 에러를 발생시킬 수 있는데, 이는 값을 반환하는 것으로 간주하지 않는다.
2. 함수가 무한 반복되는 경우
무한 루프가 발생하면 값을 반환하지 못한다.

array 타입
자바스크립트에서의 배열은 동적 언어의 특징에 따라 어떤 값이든 배열의 원소로 허용한다. 배열을 객체로 분류하기 때문에 크기, 타입이 유연하게 변경된다.
타입스크립트에서는 일반적으로 배열으로 배열의 크기까지 제한하지는 않지만 정적 타입의 특성을 살려 타입을 선언하여 해당 타입의 원소를 관리하는 것을 강제한다.
숫자형과 문자열 등 두 개 이상의 타입을 동시에 관리하려면 유니온을 사용한다.
튜플은 array 타입에서 길이까지 제한시켜서 원소 개수와 타입을 보장한다.

옵셔널(Optional)
특성 속성 또는 매개변수가 값이 있을 수도 있고 없을 수도 있는 것을 말한다.
즉, 선택적 매개변수 또는 선택적 속성은 필수적으로 존재하지 않아도 되며 선택적으로 사용될 수 있음을 나타낸다.

enum 타입
열거형이라고도 부르며 타입스크립트에서 지원하는 특수한 타입이다.
모든 멤버에 일일이 값을 할당할 수도 있지만, 열거형은 값을 1씩 늘려가며 자동으로 할당하기 때문에 간편하게 사용할 수 있다.
열거형을 사용하면 의도하지 않는 값의 할당이나 접근을 방지하는 데 도움을 준다.

교차 타입(Intersection)
교차 타입을 사용하면 여러 가지 타입을 결합하여 하나의 단일 타입으로 만들 수 있다.
교차 타입은 &를 사용해서 표기한다. 결과물로 탄생한 단일 타입에는 타입 별칭을 붙일 수 있다.

유니온 타입(Union)
유니온 타입은 타입 A 또는 타입 B 중 하나가 될 수 있는 타입을 말하며 A | B같이 표기한다.
주로 특정 변수가 가질 수 있는 타입을 전부 나열하는 용도로 사용된다. 교차 타입과 마찬가지로 2개 이상의 타입을 이어 붙일 수 있고 타입 별칭을 통해 중복을 줄일 수도 있다.

인덱스 시그니처(Index Signatures)
인덱스 시그니처는 특정 타입의 속성 이름은 알 수 없지만 속성값의 타입을 알고 있을 때 사용하는 문법이다.

인덱스드 엑세스 타입(Indexed Access Types)
인덱스드 엑세스 타입은 다른 타입의 특정 속성이 가지는 타입을 조회하기 위해 사용된다.
인덱스에 사용되는 타입 또한 그 자체로 타입이기 때문에 유니온 타입, keyof, 타입 별칭 등의 표현을 사용할 수 있다.

맵드 타입(Mapped Type)
자바스크립트의 map 메서드를 생각했을 떄 배열 A를 기반으로 새로운 배열 B를 만들어내는 배열 메서드이다.
맵드 타입은 이와 마찬가지로 다른 타입을 기반으로 한 타입을 선언할 때 사용하는 문법인데, 인덱스 시그니처 문법을 사용해 반복적인 타입 선언을 효과적으로 줄일 수 있다.

템플릿 리터럴 타입(Template Literal Types)
자바스크립트의 템플릿 리터럴 문자를 사용하여 문자열 리터럴 타입을 선언할 수 있는 문법이다.

제네릭은 C나 자바 같은 정적 언어에서 다양한 타입 간에 재사용성을 높이기 위해 사용하는 문법이다.
타입스크립트도 정적 타입을 가지는 언어이기 때문에 제네릭 문법을 지원하고 있다.

타입스크립트에서의 제네릭 타입은 함수, 타입 클래스 등에서 내부적으로 사용할 타입을 미리 정해두지 않고 타입 변수를 사용해서 해당 위치를 비워 둔 다음에, 
실제로 그 값을 사용할 때 외부에서 타입 변수 자리에 타입을 지정하여 사용하는 방식이다.

any를 사용할 때는 타입 검사를 하지 않고 모든 타입이 허용되는 타입으로 취급된다. 
반면 제네릭은 any처럼 아무 타입이나 무분별하게 받는 게 아니라, 배열 생성 시점에 원하는 타입으로 특정할 수 있다.

어떤 함수의 매개변수나 반환 값에 다양한 타입을 넣고 싶을 때 제네릭을 사용할 수 있다.
호출 시그니처는 타입스크립트의 함수 타입 문법으로 함수의 매개변수와 반환 타입을 미리 선언하는 것을 말한다.

제한된 제네릭은 타입 매개변수에 대한 제약 조건을 설정하는 기능을 말한다. 
예를 들어, string 타입으로 제약하려면 타입 매개변수는 특정 타입을 상속(extends)해야 한다.
type ErrorRecord<Key extends string> = Exclude<Key, ErrorCodeType> extends never ? Partial<Record<Key, boolean>> | never : never;

제네릭 타입은 여러 타입을 상속받을 수 있으며 타입 매개변수를 여러 개 둘 수도 있다.
<Key extends string>
타입을 이런 식으로 제약해버리면 제네릭의 유연성을 잃어버린다. 제네릭의 유연성을 잃지 않으면서 타입을 제약해야 할 때는 타입 매개변수에 유니온 타입을 상속해서 선언하면 된다.
<Key extends string | number>
