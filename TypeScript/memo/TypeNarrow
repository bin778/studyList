타입스크립트에서 타입 좁히기는 변수 또는 표현식의 타입 범위를 더 작은 범위로 좁혀나가는 과정을 말한다.
타입 좁히기를 통해 더 정확하고 명시적인 타입 추론을 할 수 있게 되고, 복잡한 타입을 작은 범위로 축소하여 타입 안정성을 높일 수 있다.

타입스크립트에서의 분기 처리는 조건문과 타입 가드를 활용하여 변수나 표현식의 타입 범위를 좁혀 다양한 상황에 따라 다른 동작을 수행하는 것을 말한다.
타입 가드는 런타임에 조건문을 사용하여 타입을 검사하고 타입 범위를 좁혀주는 기능을 말한다.
타입스크립트로 개발하다 보면 여러 타입을 할당할 수 있는 스코프(Scope)에서 특정 타입을 조건으로 만들어 분기 처리하고 싶을 때가 있다.
스코프(Scope): 타입스크립트에서 스코프는 변수와 함수 등의 식별자(Identify)가 유효한 범위를 나타낸다. 즉, 변수와 함수를 선언하거나 사용할 수 있는 영역을 말한다.

원시 타입을 추론할 때: type 연산자 활용하기
typeof 연산자를 활용하면 원시 타입에 대해 추론할 수 있다.
다만 typeof는 JS 타입 시스템만 대응할 수 있다.
null과 배열 등이 object 타입으로 판별되는 등 복잡한 타입을 검증하기에는 한계가 있다.
따라서 typeof 연산자는 주로 원시 타입을 좁히는 용도로만 사용할 것을 권장한다.

인스턴스화된 객체 타입을 판별할 때: instnaceof 연산자 활용하기
instanceof 연산자는 객체 타입을 판별하는 타입 가드로 사용할 수 있다. A instanceof B 형태로 사용한다.
instanceof는 A의 프로토타입 체인에 생성자 B가 존재하는지를 검사하며 존재시 true, 아닐 시 false를 반환한다.

객체의 속성이 있는 없는지에 따른 구분: in 연산자 활용하기
in 연산자는 객체에 속성이 있는지 확인하며, 있다면 true 없다면 false를 반환한다. 
A in B 형태로 사용하며, A라는 속성이 B 객체에 존재하는지를 검사한다.

is 연산자로 사용자 정의 타입 가드 만들어 활용하기
is 연산자를 사용하여 사용자 정의 타입 가드를 만드는 방법이 있다.
사용자 정의 타입 가드는 타입을 판별할 데이터를 매개변수로 받고, 타입좁히기 로직을 실행한 결과를 boolean 값으로 반환한다. 
이때 is 연산자를 통해 함수에서 반환하는 boolean 값에 대해 타입의 해석을 입히는 것을 타입 명제 (type predicates)라고 하며 이를 통해 매개변수로 받은 인수의 타입을 좁힐 수 있다.

타입스크립트는 구조적 타이핑 특성을 가지고 있어 타입을 조합할 때 타입을 식별할 수 있는 값을 가지고 있지 않으면, 타입시스템이 타입을 구체적으로 특정하지 못하는 문제가 발생한다.
이런 문제를 해결하기 위해 식별할 수 있는 유니온 타입(Disciriminated Union)이 제안되었다. 
유니온 타입은 여러 타입을 조합하여 사용할 때 특정 타입으로 구별하기 위해 타입을 식별하는 값을 추가하는 방법이다.

식별할 수 있는 유니온 타입의 판별자는 유닛 타입(unit type)으로 선언되어야 정상적으로 동작한다.
식별할 수 있는 유니온의 판별자로 사용할 수 있는 타입을 다음과 같이 정의하고 있다.
- 리터럴 타입이어야 한다.
- 판별자로 선정한 값에 적어도 하나 이상의 유닛 타입이 포함되어야 하며, 인스턴스화 할 수 있는 타입(instantiable type)은 포함되지 않아야 한다.

Exhaustiveness Checking이란 가능한 모든 타입 케이스에 대해 철저하게 타입을 검사하는 것을 말하며 타입 좁히기에 사용되는 패러다임 중 하나이다.
타입 가드는 보통 분기 처리가 필요하다고 생각되는 부분만 요구사항에 맞는 코드를 작성하지만, 때로는 모든 타입에 분기 처리를 진행해야 안전하다고 생각되는 상황도 있다.
이때 Exhaustiveness Checking을 통해 모든 케이스에 대한 타입 검사를 강제할 수 있다.
Exhaustiveness Checking은 if문, switch문 등의 조건문과 함께 사용하면 좋다.
