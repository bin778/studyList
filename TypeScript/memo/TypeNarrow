타입스크립트에서 타입 좁히기는 변수 또는 표현식의 타입 범위를 더 작은 범위로 좁혀나가는 과정을 말한다.
타입 좁히기를 통해 더 정확하고 명시적인 타입 추론을 할 수 있게 되고, 복잡한 타입을 작은 범위로 축소하여 타입 안정성을 높일 수 있다.

타입스크립트에서의 분기 처리는 조건문과 타입 가드를 활용하여 변수나 표현식의 타입 범위를 좁혀 다양한 상황에 따라 다른 동작을 수행하는 것을 말한다.
타입 가드는 런타임에 조건문을 사용하여 타입을 검사하고 타입 범위를 좁혀주는 기능을 말한다.
타입스크립트로 개발하다 보면 여러 타입을 할당할 수 있는 스코프(Scope)에서 특정 타입을 조건으로 만들어 분기 처리하고 싶을 때가 있다.
스코프(Scope): 타입스크립트에서 스코프는 변수와 함수 등의 식별자(Identify)가 유효한 범위를 나타낸다. 즉, 변수와 함수를 선언하거나 사용할 수 있는 영역을 말한다.

원시 타입을 추론할 때: type 연산자 활용하기
typeof 연산자를 활용하면 원시 타입에 대해 추론할 수 있다.
다만 typeof는 JS 타입 시스템만 대응할 수 있다.
null과 배열 등이 object 타입으로 판별되는 등 복잡한 타입을 검증하기에는 한계가 있다.
따라서 typeof 연산자는 주로 원시 타입을 좁히는 용도로만 사용할 것을 권장한다.

인스턴스화된 객체 타입을 판별할 때: instnaceof 연산자 활용하기
instanceof 연산자는 객체 타입을 판별하는 타입 가드로 사용할 수 있다. A instanceof B 형태로 사용한다.
instanceof는 A의 프로토타입 체인에 생성자 B가 존재하는지를 검사하며 존재시 true, 아닐 시 false를 반환한다.
