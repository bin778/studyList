API 요청
1. fetch로 API 요청하기
  api url의 변경 , 타입아웃 설정 등 api 요청 정책이 추가 될때 마다 수정이 필요하다.
2. 서비스 레이어로 분리하기
  여러 API 요청 정책이 추가되어 코드가 변경 될 수 있다는 것을 감안한다면, 비동기 호출 코드는 컴포넌트 영역에서 분리되어 다른 영역(서비스 레이어)에서 처리되어야 한다.
  fetch함수를 분리하는 것 만으로는 API 요청 정책이 추가 되는 것을 해결하기 어렵다.
3. Axios 활용하기
  fetch는 내장 라이브러리라 import나 설치가 필요없다.
  하지만 많은 기능을 사용하려면 직접 구현해야한다.
  API Entry가 다를 경우 각 서버의 기본 URL을 호출하도록 인스턴스를 따로 구성한다.
4. Axios 인터셉터 사용하기
  빌더 패턴: 객체 생성을 더 편리하고 가독성 있게 만들기 위한 디자인 패턴 중 하나다. 주로 복잡한 객체의 생성을 단순화하고, 객체 생성 과정을 분리하여 객체를 조립하는 방법을 제공한다.
5. API 응답 타입 지정하기
  같은 서버에서 오는 응답의 형태는 대체로 통일되어 있어서 하나의 Response 타입으로 묶일 수 있다.
6. 뷰 모델(View Model) 사용하기
  API 응답은 변할 가능성이 크다. 뷰 모델을 사용하며 API 변경에 따른 범위를 한정해줘야한다.
7. Superstruct를 사용해 런타임에서 타입 검증하기
  타입스크립트 만으로는 실제 서버 응답의 형식과 명시한 타입이 일치하는지를 확인할 수 없다.
  Superstruct를 활용하여 타입스크립트로 선언한 타입과 실제 런타임에서의 데이터 응답값을 매칭하여 유효성 검사를 할 수 있다.

API 상태 관리하기
상태관리 라이브러리의 비동기 함수들은 서비스 코드를 사용해 상태를 변화시킬 수 있는 함수를 제공한다. 
컴포넌트는 이러한 함수를 사용하여 상태를 구독하며, 상태가 변경될 때 컴포넌트를 다시 렌더링하는 방식으로 동작한다.

상태 관리 라이브러리의 문제점
액션 가될 때 마다 관련된 스토어나 상태가 계속 늘어난다.
모든 전역 상태 관리자가 모든 비동기 상태에 접근하고 변경할 수 있다.
2개이상의 컴포넌트가 구독하고있는 비동기 상태가 있으면 쓸데없는 비동기 통신의 발생하거나 의도치 않은 상태 변경이 발생할 수 있다.

react-query나 useSwr 같은 훅을 사용한 방법은 상태 변경 라이브러리를 사용한 방식보다 훨씬 간단하다.
캐시를 사용하여 비동기 함수를 호출한다.
상태 관리 라이브러리에서 발생했던 의도치 않은 상태 변경을 방지할 수 있다.

API 에러 핸들링
비동기 API 호출을 하다 보면 상태 코드에 따라 401(인증되지 않은 사용자), 404(존재하지 않는 리소스), 500(서버 내부 에러) 혹은 cors 에러 등 다양한 에러가 발생할 수 있다.
코드에서 발생할 수 있는 에러 상황에 대해 명시적인 코드를 작성하면 유지보수가 용이해지고, 사용자에게도 구체적인 에러 상황을 정달할 수 있다.
1. 타입 가드 활용하기
  Axios 라이브러리에서는 Axios 에러에 대해 isAxiosError라는 타입가드를 제공하고 있다.
2. 에러 서브클래싱하기
  서버에러 이외에도 인증정보 에러, 네트워크 에러, 타입 아웃 에러 같은 다양한 에러가 발생하기도 한다.
  이를 더욱 명시적으로 표시하기 위해 서브 클래싱을 활용할 수 있다.
3. 인터셉터를 활용한 에러 처리
  axios를 사용하고 있다면 인터셉터를 활용하여 일관된 로직을 적용할 수 있다.
4. 에러 바운더리를 활용한 에러 처리
  에러 바운더리는 리액트 컴포넌트 트리에서 에러가 발생할 때 공통으로 에러를 처리하는 리액트 컴포넌트이다.
  에러 바운더리를 사용하면 리액트 컴포넌트 트리 하위에서 있는 컴포넌트에서 발생한 에러를 캐치하고, 해당 에러를 가장 가까운 부모 에러 바운더리에서 처리하게 할 수 있다.
  에러 바운더리는 에러가 발생한 컴포넌트 대신에 에러 처리를 하거나 예상치 못한 에러를 공통 처리할 때 사용할 수 있다.
5. 상태 관리 라이브러리에서의 에러 처리
  리덕스와 mobx에서의 에러 처리
6. react-query를 활용한 에러 처리
  react-query는 상태를 반환해줘서 요청 상태를 확인하기 쉽다.
7. 그 밖에 커스텀 에러를 구현해서 처리할 수 있다(인터셉터).

API 모킹
프론트엔드 개발을 하다보면 서버 API가 완성되기 전에 개발을 진행해야하는 일이 종종 있다.
모킹을 활용하면 dev서버가 불안하거나 AWS 등에 문제가 생겼을 때와 같은 서버 상태에 문제가 발생한 경우에도 서버의 영향을 받지 않을 수 있다.
이외에도 이슈가 생겼을 때 charles등의 도구를 활용하면 응답 값을 그대로 복사하여 이슈 발생 상황을 재현하는데 도움이 된다.
우아한 형제들에서는 axios-mock-adapter, NextApiHandler등을 활용하여 API를 모킹해서 사용하고 있다.
1. JSON 파일 불러오기
  간단한 조회가 필요할 때 사용한다.
2. NextApiHandler 활용하기
  하나의 파일 안에 핸들러를 디폴트 익스포트로 구현해야하며 파일의 경로가 요청 경로가 된다.
3. API 요청 핸들러에 분기 추가하기
  요청 경로를 수정하지 않고 평소에 개발할 때 필요한 경우에만 실제 요청을 보내고 그 외에는 목업을 사용하여 개발하고 싶은 경우가 있다.
  이럴 때는 API 요청을 훅 또는 별도의 함수로 선언해준 다음 조건에 따라 목업 함수를 내보내거나 실제 요청함수를 내보내거나 모든 API 요청에 if 분기문을 추가해야한다.
4. axios-mock-adapter로 모킹하기
  서비스 함수에 분기문이 추가되는게 싫으면 라이브러리를 사용한다.
  axios-mock-adapter는 요청을 가로채서 요청에 대한 응답 값을 대신 반환한다.
