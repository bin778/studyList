API 요청
1. fetch로 API 요청하기: 
  api url의 변경 , 타입아웃 설정 등 api 요청 정책이 추가 될때 마다 수정이 필요하다.
2. 서비스 레이어로 분리하기
  여러 API 요청 정책이 추가되어 코드가 변경 될 수 있다는 것을 감안한다면, 비동기 호출 코드는 컴포넌트 영역에서 분리되어 다른 영역(서비스 레이어)에서 처리되어야 한다.
  fetch함수를 분리하는 것 만으로는 API 요청 정책이 추가 되는 것을 해결하기 어렵다.
3. Axios 활용하기
  fetch는 내장 라이브러리라 import나 설치가 필요없다.
  하지만 많은 기능을 사용하려면 직접 구현해야한다.
  API Entry가 다를 경우 각 서버의 기본 URL을 호출하도록 인스턴스를 따로 구성한다.
4. Axios 인터셉터 사용하기
  빌더 패턴: 객체 생성을 더 편리하고 가독성 있게 만들기 위한 디자인 패턴 중 하나다. 주로 복잡한 객체의 생성을 단순화하고, 객체 생성 과정을 분리하여 객체를 조립하는 방법을 제공한다.
5. API 응답 타입 지정하기
  같은 서버에서 오는 응답의 형태는 대체로 통일되어 있어서 하나의 Response 타입으로 묶일 수 있다.
6. 뷰 모델(View Model) 사용하기
  API 응답은 변할 가능성이 크다. 뷰 모델을 사용하며 API 변경에 따른 범위를 한정해줘야한다.
7. Superstruct를 사용해 런타임에서 타입 검증하기
  타입스크립트 만으로는 실제 서버 응답의 형식과 명시한 타입이 일치하는지를 확인할 수 없다.
  Superstruct를 활용하여 타입스크립트로 선언한 타입과 실제 런타임에서의 데이터 응답값을 매칭하여 유효성 검사를 할 수 있다.

API 상태 관리하기
상태관리 라이브러리의 비동기 함수들은 서비스 코드를 사용해 상태를 변화시킬 수 있는 함수를 제공한다. 
컴포넌트는 이러한 함수를 사용하여 상태를 구독하며, 상태가 변경될 때 컴포넌트를 다시 렌더링하는 방식으로 동작한다.

상태 관리 라이브러리의 문제점
액션 가될 때 마다 관련된 스토어나 상태가 계속 늘어난다.
모든 전역 상태 관리자가 모든 비동기 상태에 접근하고 변경할 수 있다.
2개이상의 컴포넌트가 구독하고있는 비동기 상태가 있으면 쓸데없는 비동기 통신의 발생하거나 의도치 않은 상태 변경이 발생할 수 있다.

react-query나 useSwr 같은 훅을 사용한 방법은 상태 변경 라이브러리를 사용한 방식보다 훨씬 간단하다.
캐시를 사용하여 비동기 함수를 호출한다.
상태 관리 라이브러리에서 발생했던 의도치 않은 상태 변경을 방지할 수 있다.
