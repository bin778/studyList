
빅데이터(Big Data)
	기존 방식으로 처리할 수 없을 정도의 크고 복잡한 데이터들의 집합

빅데이터의 특징 : 3V
	Velocity(속도) : 실시간 데이터 수집 및 빠르고 효율적인 처리를 요구
			(저장, 분석, 로드등의 속도)
	Volume(규모) : 엄청난 규모의 데이터 -> TB단위 이상
	Variety(형태, 다양성) : 다양한 데이터의 범위를 포함
		(액셀, 영상, 사진 등등.... 정형, 비정형 데이터를 포함한다.)

정형 데이터 : Excel 같이 특정 형태로 정형화된 데이터
비정형 데이터 : 일정한 형태가 아닌 데이터(목소리, 영상...)

빅데이터 분석을 하는 이유?
	- 가치있는 정보를 창출하고 활용하여 예측하기 위함
	예측이란 앞으로 일어날 일을 100% 맞추는 것이 아니다.
	현실 세계에서 일어날 일엔느 수 많은 변수가 존재하기 때문에
	100% 정확한 예측이란 불가능하다.

Data(자료) : 관찰된 객관적 사실(이름, 숫자, 나이 등등...)
Information(정보) : 가공된 데이터(의미가 생긴 Data)
	Data(자료) --(가공)--> Information(정보)

Knowledge(지식) : 정보의 이용에 대한 노하우
Wisdom(지혜) : 지식을 활용하는 것

위의 4가지를 DIKW라고 한다.

빅데이터 처리 과정
	데이터 수집 > 전처리 > 분석 > 표현 > 예측 및 활용

데이터 분석용 프로그램
	- 무료 : R, 파이썬
	- 유료: SAS, SPSS

R이란?
	데이터 분석에 특화된 프로그래밍 언어, 소프트웨어

R의 특징
	1. 통계학자가 만든 언어이다.
	다양한 통계정보를 산출할 수 있다.
	2. 굉장히 다양한 패키지들이 제공된다.
	다른 사람이 만들어 놓은 기능을 가져다 사용하면 된다. 
	3. 한글에 취약하다.
	4. 많은 사람이 사용한다.(국내, 해외 모두)
	많은 사람이 사용하는 언어는 커뮤니티가 발달되어 있으므로
	검색에 유리하다.

R 다운받기(크롬, 엣지 사용하기)
윈도우 검색에서 r눌러서 설치되어 있는지 확인하기

구글에서 R 검색 > 최상단 링크 접속 > 좌측 Download에 CRAN누르기 > 
korea찾기 아무링크나 들어가기 > Download R for Windows클릭 >
base 클릭 > 최상단에 최신 버전 Download 누르기


R Studio
	R을 편리하게 사용하기 위한 IDE 소프트웨어

IDE(Intergrated Development Environment)
코드(명령어), 파일관리 등 프로그램에 필요한 다양한 작업을 수행할 수 있도록 도와주는 소프트웨어
	R을 설치하고 R Studio를 설치하여 사용한다.

R Studio 다운받기
구글 > RStudio 검색 > Download Rstudio Desktop) 링크 접속 > 
사이트 상단에 download > 페이지 하단에 Download Rstudio 버튼 클릭

R Studio 실행하면 프로젝트가 내 프로젝트로 설정되어 있는지 확인하기!

콘솔창
	명령어를 작성하고 실행결과를 확인할 수 있는 창
	즉, 컴퓨터와 소통을 할 수 있는 창이다.
	> 에 명령어를 입력하고 엔터를 치면 명령어가 한 줄씩 실행된다.
	+ 는 위의 명령어와 연결한다.

스크립트 파일
	콘솔창에 명령어를 입력할 경우 일련의 과정을 파악하기 힘들다.
	따라서 명령어를 편하게 파악하고 싶을 경우 스크립트 파일을 만든다.

스크립트 파일 명령어 실행 방법
	실행시키고 싶은 명령어에 커서를 둔다.
	Ctrl + Enter : 실행 후 줄 바꿈
	Alt + Enter : 실행

패널 위치 변경하기
	tools > global options > Pane Layout에서 선정

명령어가 길어졌을 시 자동으로 줄 바꿈
tools > global options > code > soft wrab 체크하기

소스창
	명령어를 작성하는 창
	소스창에 명령어를 작성하고 저장하면 script 파일이 실제 경로에 만들어진다.

환경창 (Environment)
	데이터를 보여주는 창

파일창
	폴더에 있는 파일을 보여주는 창

주석(comment)
	사람을 위한 코드이며 컴퓨터가 해석하지 않는다.
	단축키 : Ctrl + Shift + C

함수(function) -> method
	이름 뒤에 소괄호가 있다.(기능)

print() -> 출력 함수
	괄호 안에 들어간 값을 콘솔창에 출력하는 기능을 가진 함수
	print()함수를 사용하지 않고 작성하여도 콘솔창에 출력이 된다.

값의 종류(자료형, Data type)
	1. 숫자(numeric) : 10, -4, 3.14......
	2. 문자(character) : "안녕", "Hello", "10", "TRUE" ,....
	3. 논리(logical) : TRUE, FALSE (대소문자 주의)

연산자★★★
	어떠한 기능을 하는 특수 문자

산술 연산자 : +, -, *, /
	%/% : 몫 연산자
	%% : 나머지 연산자
	^ : 지수 연산자(거듭제곱)

연산의 결과가 어떤 타입인지 파악하는 것이 가장 중요하다.

변수★★★
- 값을 저장하는 저장 공간
- 값을 재사용하고 싶을 때 사용한다.
- 값에 의미와 이름을 부여한다. 
	22 : 어떤 데이터인지 알 수 없다.
	age <- 22 : 22라는 데이터가 나이와 관련된 데이터인 것을 알 수 있다.

변수 생성
변수이름 <- 값

대입 연산자 (<-)
- 연산자(이름) <- 값
	대입 연산자의 좌측에는 저장 공간, 우측에는 값이 온다.
	대입 연산자는 오른쪽의 값을 왼쪽의 저장 공간에 저장해준다.
	* 반대 방향으로도 사용 가능하다. ( 값 -> 저장 공간 )
	* = 를 사용 가능하다. (저장공간 = 값 )

변수의 사용
- 변수가 대입 연산자 앞에 사용되면 저장 공간으로 사용된다.
	num <- 10
- 그 외에는 저장된 값으로 사용된다.
	num
	num + 10
	a <- num

변수의 이름 규칙★★★
1. 첫 글자는 영어로 시작한다.
2. 특수문자는 _와 .을 사용할 수 있다.
3. 대소문자를 구별한다.
4. 띄어쓰기를 허용하지 않는다.
5. 되도록 의미 있는 단어를 사용한다.
6. 되도록 한글을 사용하지 않는다.

userName : 카멜 표기법
user_name : 스네이크 표기법(팟홀 표기법)
user.name : 옛날에 R에서 사용했던 표기법

논리 타입 변수
논리 값을 편하게 쓰기 위해 기본적으로 제공되는 변수
T : TRUE가 들어있다.
F : FALSE가 들어있다.
변수이기 때문에 다른 값을 넣어버리면 다른 값이 나올 수 있다.

자료구조(Data Structure)
	- 데이터를 어떻게 저장하고 사용할 것인가?
	-> 데이터를 어떤 구조(형태)로 저장하고 어떤 방식으로 사용할 것인가?

	- 데이터를 상황에 맞게 효율적으로 사용하기 위한 구조

R의 자료구조 종류
1. 스칼라(Scala)
	하나의 데이터를 저장하는 구조
	변수의 자료구조가 스칼라이다.

2. 벡터(Vector)★★
	같은 자료형을 가진 여러 값들을 저장하는 구조
	(스칼라를 나열한 구조)
	하나의 벡터는 하나의 자료형만 저장 가능하다.
	벡터는 데이터의 순서가 있다.

3. 행렬(Matrix)
	같은 자료형을 가진 여러 값들을 저장하는 구조
	행렬은 [행:row]과 [열:column]을 가진 표 형태이다.

4. 배열(Array)
	행렬(Matrix)을 여러 개 저장하는 구조

5. 데이터프레임(DataFrame)★★
	Matrix와 같은 행과 열을 가진 표 형태이다.
	단, DataFrame은 열 마다 다른 자료형을 가질 수 있다.

6. 리스트(List)
	여러 자료구조를 한번에 모아서 취급한다.
	[벡터, 벡터, 벡터], [배열, 벡터, 데이터프레임]

Vector
1. 생성하기
	-c() : combine
	ex) c(1, 3.14, -4, 0, -2.0)
	직접 원하는 값으로 벡터를 만들 수 있다.

	- seq() : sequence
	규칙성이 있는 값을 벡터로 만든다.

	- 콜론 연산자(:)
	n:m
	ex) 1:10
	별다른 옵션이 없기 때문에 1씩 증가/감소하는 벡터를 만든다.

2. 값 하나 가져오기
	인덱스 번호를 활용하여 값을 가져온다.
	ex) nums[1]

3. 여러 값 가져오기
	여러 인덱스 번호를 답은 벡터를 활용하여 값을 가져온다.
	벡터에서 값을 가져왔을 때 결과가 벡터라는 사실을 잊지 말자!!!

4. 값 수정하기
	대입 연산자를 사용하여 수정한다.
	ex)
	test[4] <- 0
	test[4:8] <- 0
	test[c(2,4)] <- c(10,20)

- 벡터의 값
	같은 타입의 값만 저장할 수 있기 때문에 다른 타입이 들어오면 하나의 타입으로 통일 시킨다.

벡터 열의 이름
- names(벡터)
	벡터 열(column)의 이름을 벡터 형태로 가져온다.
	아무 이름도 없다면 NULL이 나온다.

- names(벡터) <- c("이름1","이름2",....)
	벡터의 칼럼명을 저장한다.

- 주의사항
	벡터의 열 이름은 중복되면 안되고, 가능하면 한글은 사용하지 않는다.
	다른 타입으로 저장해도 문자타입으로 변환되어 저장된다.

- 이름 사용하기
	벡터의 열 이름을 저장하면 이름으로 값을 가져올 수 있다.
	ages['이름']


비교 연산자(관계 연산자)
	- 비교 연산자의 결과는 논리형 값이다.(T, F)
	비교연산자가 사용된 식은 논리타입의 값으로 봐야 한다.

	- >, < : 초과, 미만
	a > b : a가 b보다 크다

	- >=, <= : 이상, 이하
	a >= b : a가 b보다 크거나 같다.

	- == : 같다.
	a==b : a와 b가 같다.

	- != : 같지 않다.
	a!=b : : a와 b가 다르다.


논리 연산자
	논리 연산자의 결과는 논리형 값이다.

	- &(and 연산자)
	a & b : a 그리고 b 둘 다 TRUE일 때 TRUE

	- |(or 연산자)
	a | b : a 또는 b 둘 중 하나라도 TRUE면 TRUE

	- !(not 연산자)
	!a : a가 TRUE면 FALSE, FALSE면 TRUE

연산자의 우선순위
()최우선 -> 단항 -> 산술 -> 비교 -> 논리 -> 대입
