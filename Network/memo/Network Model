모듈화(Modularization) : 복잡한 시스템을 기능별로 모듈화하면 시스템 구조가 단순해짐. 프로그래밍 언어에서는 함수를 이용해 프로그램을 모듈화함.

계층 구조 : 특정 모듈이 다는 모듈에 서비스를 제공하는 형식의 계층 구조
   --> 장점 1. 전체 시스템을 이해하기 쉽고, 설계 및 구현이 편리함.
            2. 모듈의 독립성을 향상시키고 시스템을 단순화할 수 있음
            3. 인터페이스를 유지하면 내부 기능이 변화돼도 전체 시스템에 영향 X

프로토콜 설계 시 고려사항
주소(Address) : 시스템을 구분하기 위해 이름을 지칭하는 것(구조적 정보)
ex) 전화번호 : 국가코드-지역코드-번호, 주민등록번호
1:다 (1:N) 통신을 지원
- 브로드캐스팅 : 모든 호스트에게 데이터 전달
- 멀티캐스팅 : 특정 호스트에게 데이터 전달
1:1통신 : 유니캐스트(Unicast)

오류 제어
- 데이터 변형 오류 : 데이터가 깨져서 도착
- 데이터 분석 오류 : 데이터가 도착하지 못함
- 오류 제어 기능은 통신 프로토콜의 가장 기본적인 기능
- 네트워크에서 전송 오류를 해결하는 것은 송신 호스트가 원래 데이터를 재전송(Re-transmission)


흐름 제어
- 수신 호스트의 버퍼 처리속도 보다 송신 호스트의 데이터 전송속도가 빠르면 논리적인 데이터 분실 오류가 발생할 수 있음
-> 따라서 송신 호스트의 전송 속도를 조절하는 흐름제어 기능이 필요

데이터 전달 방식
-단방향(Simplex) : 데이터를 한쪽 방향으로만 전송 ex) TV, 라디오
-반이중(Half-Duplex) : 양방향으로 전송할 수 잇지만, 특정 시점에는 한쪽방향으로 만 전송 ex) 무전기
-전이중(Full-Duplex) : 데이터를 양쪽으로 동시에 전송

서비스 프리미티브(Service Primitive)
- 계층 구조 프로토콜에서 하위 계층이 상위 계층에 제공하는 서비스의 종류에는 연결명과 비연결명이 있으며 프리미티브로 구현됨

연결형(Connection-oriented) 서비스
- 연결형 서비스를 이용하는 3단계
CONNECT : 연결설정, DATA : 데이터 전송, DISCONNECT : 연결 해제

비연결형(Connectionless) 서비스
- 전송할 데이터가 있으면 각 데이터를 독립적으로 목적지 호스트로 전송
Request : 클라이언트가 서버에 서비스를 요청(연결 설정 요청(CONNECT.Request), 데이터 전송 요쳥(DATA.Request), 연결 해제 요청(DISCONNECT.Request) 등)
Indication : 서버에 서비스 요청을 알린다.
Response : 서버가 클라이언트에 응답을 회신함.
Confirm : 클라이언트에 응답이 도착했음을 확인함.
