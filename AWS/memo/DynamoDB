NoSQL란?
DynamoDB는 NoSQL(Not Only SQL)이다. 일반적인 SQL하고 다르다.
NoSQL은 2000년대 후반에 등장하여 데이터베이스 세계에 자리를 잡았다. NoSQL은 관계형 데이터베이스처럼 행과 열이 존재하는 테이블 형식이 아닌, 데이터 모델은 어떻게 설계하느냐에 따라 데이터베이스의 포맷이 달라진다.
이는 크게 세 가지로 나눌 수 있다.
- 문서 데이터베이스: JSON 형태의 문서를 보관.
- Key-Value 데이터베이스: 키-값 쌍으로 보관하는 형태의 JSON 데이터를 보관.
- 그래프 데이터베이스: 노드와 엣지를 사용하여 데이터를 보관. 노드에는 테이블의 정보(유저 ID, 이름, 나이)가 있고, 엣지는 하나 혹은 여러 개의 노드를 연결하고 있으며 노드의 관계를 묘사.

DynamoDB란?
DynamoDB는 AWS에서 제공하는 서버리스 기반 Key-Value NoSQL 데이터베이스이다.

DynamoDB 장점
1. DynamoDB 쿼리 속도는 타의 추종을 불허할 만큼 아주 빠르다. 물론 잘 구축된 데이터 베이스 디자인도 중요하지만, NoSQL 데이터베이스는 쿼리 속도(특히 읽기 속도)가 매우 빠르다.
2. DynamoDB는 오토스케일링 기능이 있다. 오토스케일링 기능이 활성화되면 데이터 크기에 따라 테이블 크기가 자동으로 변경되어 불필요한 자원을 줄여 비용을 절약할 수 있다.
3. DynamoDB는 NoSQL이기 때문에 테이블 생성 시 스키마를 정의할 필요가 없다. 따라서 JSON 형태의 데이터가 들어오면 그대로 스키마와 테이블이 생성되어 데이터 타입이 자동으로 정의될 수 있다.

파티션 키(Partition Key)
- DB에서 일반적으로 생각하는 단순 기본키(PK)
- 데이터를 나누고 분리시키는 키 
- 고유 특징(Unique Attribute)
- 실제 데이터가 들어가는 위치를 결정해줌
- 파티션 키 사용시 동일한 두 개의 데이터가 같은 위치에 저장될 수 없음(같은 위치에서는 파티션 키 중복 불가).
- 파티션 키 대신 해시 속성 혹은 해시키로도 불림

복합 키(Composite Key)
- Partition Key(파티션 키) + Sort Key(정렬 키 혹은 범위 속성)
- 예시: 똑같은 고객이 다른 날짜에 다른 물건을 구매한 경우 -> 여기서 파티션 키는 고객 아이디, 정렬 키는 날짜를 의미함.
- 같은 파티션 키의 데이터들은 같은 장소에 보관, 그 다음 정렬키에 의해 데이터가 정렬됨.
- 여러 항목이 중복 된 파티션 키 값을 가질 수 있지만, 동일한 파티션 내에서 다양한 정렬 키 값을 가져야함.

로컬 보조 인덱스(Local Secondary Index)
- 테이블 생성시에만 정의 가능
- 테이블 생성 후 변경, 삭제 불가능
- 기본테이블과 똑같은 파티션 키를 사용, 다른 정렬키 사용
- 테이블 생성 시 LSI를 생성하려면 RangeKey를 설정해야 함.

글로벌 보조 인덱스(Global Secondary Index)
- 테이블 생성 후에도 추가, 변경 삭제 가능
- 다른 파티션 키, 정렬 키 사용 가능(선택사항)

쿼리(Query)
- 쿼리는 테이블을 만들 때 정의한 기본키를 가지고 데이터를 가져오는 방법이다. 
- 만약 쿼리를 하고 반환하는 데이터 양이 너무 많다면 정렬키를 제공하고 추가로 필터링하여 원하는 데이터를 가져올 수 있다. 'ProjectionExpression'이라는 파라미터를 추가로 제공하여 우리가 원하는 열만 가져올 수도 있다.

스캔(Scan)
- 스캔은 쿼리와 달리 기본키를 사용하지 않고, 테이블 안의 모든 데이터를 불러오는 방법이다.
- 스캔은 모든 데이터를 불러온 다음 필터를 추가하여 원하는 데이터만 볼 수 있는 기능을 제공한다.
- 병렬 스캔: 수많은 스캔 일꾼을 여러 군데 분산시켜서 병행하는 기능으로 스캔의 성능을 비약적으로 향상시키는 방법

스캔과 쿼리는 큰 차이점이 있다. 쿼리는 초반의 테이블의 일부만 검색하여 데이터를 가져오는 반면 스캔은 일단 테이블 전체를 한 번 살펴본 후 필터링 작업을 한다. 따라서 방대한 양의 데이터가 있는 테이블을 사용할 시 쿼리가 스캔보다 훨씬 효율적이다.
