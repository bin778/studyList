서버리스(Serverless): 클라우스에서 AWS 리소스를 돌릴 때 개발자가 직접 간섭할 필요가 없고, 개발자가 구현한 애플리케이션을 클라우드에서 돌릴 수 있게 도와주는 클라우드 기반 개발 모델
즉, 서버리스는 리소스를 자동으로 관리한다고 생각하면 됨
서버리스의 장점: 오토스케일링(네트워크 트래픽에 따라 크기를 조절해 줌), 패칭(RDS에서 새로운 DB를 구축할 때 자동으로 업데이트 해줌), 빠른 배포, 비용 절감

Lambda: Lambda는 서버리스의 특성과 장점을 가지고 있다. Lambda 이벤트에 의해 실행된다.
이벤트는 문장의 '주어 + 동사'기본 형태에서 '동사'라고 생각하면 쉽다.
  S3 버킷에 파일을 업로드한다.
  데이터베이스에서 특정 레코드를 삭제한다.
  CloudWatch에서 경보가 울렸으며 Amazon SNS로 메시지가 전송된다.
  HTTP에서 API PUT요청이 발생했다.
마지막 동사부분이 이벤트라고 생각하면 된다.
개발자가 Lambda에서 코드를 작성한 후 배포하면 이벤트가 발생할 경우 Lambda 함수가 호출된다. Lambda 함수가 호출되면 코드로 원하는 로직을 실행시킬 수 있을 뿐만 아니라 또다른 AWS 리소르를 불러올 수도 있다.
Lambda 함수는 Java, Python, Node.js, Go 등 다양한 언어를 지원한다.

Lambda 비용 책정
Lambda 함수를 생성하고 배포했으나 실행하지 않는다면 비용이 발생하지 않는다. 이벤트를 발생하고 Lambda 함수가 호출될 때만 비용이 발생한다.
AWS에서는 매달 1000000개의 Lambda 함수 호출 까지 무료이며, 그 이상부터는 매 1000000번의 Lambda 호출 시 드는 비용은 0.20달러이다.
또 Lambda 함수로 다른 AWS 리소스를 호출할 경우 비용을 따로 지불해야 한다.

Lambda 장점
1. (관리) 서버 사양, 개수 등 관리에 필요한 고민 불필요
2. (관리) 서버 상태 모니터링 및 Scaling 불필요(Auto Scaling 지원)
3. (비용) 밀리 초 단위로 함수를 사용한 만큼만 과금
4. (비용) 프리티어의 경우, 1GB 메모리 환경에서 월 100만 건, 월 40만 초의 실행시간 무료 제공

Lambda 단점
1. (속도) 함수 호출 시 Cold Start 문제로 초기 지연시간 발생. AWS EC2에 비해 약 1ms 만큼 지연.
2. (성능) 러닝타임이 최대 15분이므로 이를 넘어가는 Task 수행불가
3. (이주) Lambda로 구축한 후 Azure, GCP 같은 타 Cloud로 migration 하기 어려움

Lambda 사용 사례
1. 서버 관리 부담을 줄이고 싶은 경우
Lambda는 서버 관리에 많은 시간과 노력을 쏟지 않으면서  간단한 코드로 실행 가능한 서비스를 만드는 경우에 적합하다.
AWS EC2를 사용하면 서버 트래픽이나 사양을 고려하여 서버 프로비저닝, 스케일링 등의 작업을 해주어야 한다.
반면, Lambda는 이러한 서버 관리가 필요 없이 코드에만 집중할 수 있기 때문에, 서버 관리에 많은 시간과 노력을 들이고 싶지 않다면 Lambda가 적합하다.

2. 특정 시간/기간만 사용하는 경우
Lambda는 함수가 호출될 때만 코드를 실행시키기 때문에 특정 시간이나 특정 기간에만 동작하는 서비스를 만들 때 유용하다.
예를 들어, 회사에서 월급 지급 서비스를 만든다면 굳이 서버를 매일 켜 둘 필요 없이, 월급을 지급하는 날에만 동작시키면 된다.
다른 예시로, 매주 월요일 밤에만 동작하는 특정 서비스 개발에도 마찬가지이다. 필요한 시간에만, 필요한 임무만 수행하면 되기 때문에, 불필요한 서버 가동시간을 줄일 수 있다.
반면, AWS EC2에 비해 Lambda는 초기 지연시간이 있으며, 러닝타임 제한(=15분), 타 Cloud 서비스로의 migration의 어려움, AWS에 의존적일 수밖에 없다는 한계점도 있다. 이러한 모든 요소를 고려하여 서비스를 선택하는 것이 좋다.
