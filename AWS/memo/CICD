지속적 통합(CI, Continuous Integration)
CI는 조직의 개발자들이 작성한 코드를 정기적으로 통합하는 것을 의미한다.
개발자는 CI를 에러를 손쉽게 해결할 수 있고, 코드 충돌도 피할 수 있다.

지속적 배포(CD, Continuous Deployment)
CD는 개발자가 소프트웨어를 공개할 때 언제든지 신뢰 가능한 수준으로 출시될 수 있도록 보증하는 것이다.
소프트웨어 배포 과정은 복잡하며 잦은 실수가 나올 수 있지만 CD 덕분에 그 부담을 줄일 수 있다.

CI/CD는 함께 공존한다.
개발자가 모든 과정을 관리하는 것은 어렵기 때문에 CI/CD 자동화 개념을 도입하여 소프트웨어 개발을 관리한다.

CI/CD 장점
1. 소프트웨어 개발시 반복적 작업을 모두 자동화해 소프트웨어 개발이 빨라지고, 운영되고 있는 프로덕션에서 패치 또는 새로운 기능을 배포할 수 있다.
2. 점진적 변화를 가능하게 하여 개발자가 작성한 코드에 오류나 문제가 발생할 경우 유연하게 수정할 수 있다.

리포지토리(Repository)
리포지토리는 코드를 보관하며, 회사나 단체에서 수 많은 개발자가 코드를 공유하고 수정하는 곳이다.
가장 유명한 리포지토리는 GitHub가 있다. GitHub는 단순히 코드를 업로드하고 보관하는 용도로 사용될 뿐만 아니라 웹사이트를 호스팅할 수 있고, 코드의 테스트를 자동화할 수 있다.

GitHub 브랜치
브랜치는 크게 로컬 브랜치와 마스터 브랜치로 분류된다.
로컬 브랜치(Local Branch): 개발자가 프로그램을 개발하고 테스트 하는 곳이다.
마스터 브랜치(Master Branch): 실제 프로덕션에서 사용되는 코드를 담고 있는 곳이다.

리포지토리도 로컬 리포지토리와 원격 리포지토리로 분류된다.
로컬 리포지토리는 개발자가 직접 브랜치를 만들고 코드를 구현한다.
원격 리포지토리는 GitHub에서 생성한 리포지토리이며 마스터 브랜치가 하나가 존재한다.
이때 클론에서 리포지토리에 있는 내용을 그대로 로컬에 가져오면 원격과 로컬 리포지토리의 파일은 동일해진다.

배포 과정
개발자가 구현한 코드에 대해 테스트가 끝났다고 해서 바로 프로덕션에 반영되지 않고 배포 준비를 해야 한다.
CI/CD는 현재 프로덕션에서 돌아가는 코드와 최근에 변경된 코드에 차이가 감지된다면 자동으로 배포를 준비한다. 
물론 배포 후 예상치 못한 버그가 발견했을 때는 개발자가 직접 버그를 수정하거나 기존 버전으로 롤백해야 한다.
4명의 개발자들이 중앙 리포지토리를 통해 독립적으로 코드를 구현하고 공유한다고 가정할 때, 그 중 한명이 기능 구현과 테스트를 마칠 때 배포를 통해 본인의 코드를 합치고 실제 프로덕션에 변경 사항을 적용시킨다.

코드 커밋(Code Commit)
코드 커밋은 파일(코드, 이미지, 동영상 등등)을 보관하는 저장 장소로 사용된다. 많은 개발자가 동시에 코드 커밋에 접근하여 하나 혹은 여러 개의 파일을 업데이트하고 업로드한다.
리포지토리에 있는 파일은 원격 리포지토리이며 마스터 브랜치이기 때문에 언제, 누가, 무슨 파일을 수정했는지에 대한 정보를 알 수 있는 버전 컨트롤 기능을 제공한다.
업데이트를 통해 프로그램에 오류가 생기면 버전 컨트롤 기능을 사용해 마스터 브랜치를 이전 버전으로 롤백할 수 있다.

코드 배포
새로운 코드를 테스트 이후 문제가 없다고 판단되면 리포지토리에 코드 수정 및 업데이트하여 프로덕션으로 배포를 하는 데 이를 코드 배포라고 하며, 자동 배포라고도 할 수 있다.
코드 배포에는 롤링 배포와 블루그린 배포로 구분된다.
롤링 배포(Rolling Deployment)는 구 버전에서 신 버전으로 점진적으로 전환하는 배포라고 보면 된다. 관리가 편하지만, 한쪽 인스턴스 수가 감소되므로 서버 처리 용량을 미리 고려해야 한다.
블루그린 배포(Blue/Green Deployment)는 구 버전을 블루, 신 버전을 그린이라고 해서 붙여진 이름이다. 신 버전을 배포하고 일제히 전환하여 모든 연결을 신 버전으로 바라보게 하는 전략이다. 빠른 전략이 가능하지만 시스템 자원과 비용이 더 많이 발생한다.

코드 파이프라인
코드 파이프라인은 소스 코드의 관리부터 실제 서비스로의 배포 과정을 연결하는 구조이다. 코드 파이프라인은 모든 과정을 자동화시킨다.
