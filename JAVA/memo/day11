추상 클래스
	클래스는 클래스인데 추상 메소드가 존재하는 클래스
	필드위에 미 구현된 공간(추상메소드)이 존재하는 클래스

추상 메소드
	선언만 되어있고(메소드이름, 리턴타입, 매개변수 등), 
	정의되어있지 않은({body}가 없는 ) 메소드

	추상 클래스는 객체화가 불가능하다
	메모리상에 미구현된 공간이 있기 때문에

	추상클래스를 상속받은 자식 클래스는
	1. 반드시 추상 메소드를 재정의(구현)해야만 한다
		메소드를 재정의 하는 것에 강제성을
		부여하기 위해 사용한다
	2. 자식클래스도 추상클래스로 만든다(객체화하지 않고 부모로만 사용할때)
-------------------------------------------------------------------------------
Interface
	추상클래스는 추상클래스인데 추상메소드만 존재하는 추상클래스
	
	상속을 받을 때 implements로 상속을 받는다
	인터페이스 또한 객체화가 불가능하다
	인터페이스 여러개 상속 가능

Adapter Pattern
	보통 두 개 이상의 추상메소드를 가진 인터페이스는
	짝꿍인 Adapter 클래스가 같이 만들어진다
	따라서 인터페이스 속 메소드 일부만 재정의하고 싶다면
	Interface를 상속받지 않고, Adapter 클래스를 상속받아
	일부만 재정의 할 수 있다.

자바와 다중상속
	자바에서는 모호성이 발생할 수 있기 때문에
	원칙적으로 다중상속이 허용되지 않는다
	그러나 다중상속에 대한 수요가 증대하고, 다중상속을 회피하여
	사용할 수 있기 때문에 인터페이스라는 문법이 추가가 되며
	현재는 사실상 다중 상속을 허용하고 있다
-------------------------------------------------------------------------------
내부클래스
	클래스 안에 선언된 클래스
	B라는 클래스가 A라는 클래스 안쪽에서밖에 사용이 안된다면
	내부클래스로 만들 수 있다
1. 내부 인스턴스 클래스
2. 내부 스태틱 클래스
3. 내부 지역 클래스
4. 내부 익명 클래스
-------------------------------------------------------------------------------
내부 익명 클래스
	이름없는 클래스
	특정 부모를 상속받은 클래스인데, 이름이 존재하지 않고
	이를 부모타입으로 업캐스팅하여 사용하는 것이다
	일회적으로 사용하고 싶을 때 사용한다

	++ 추가적으로 발전 한 것이
	Lambda식이다.
	익명클래스를 만드는 방법
-------------------------------------------------------------------
제네릭
	사용자로부터 타입을 전달받는 문법
	클래스 타입만 전달해줄 수 있다
	객체화를 할 때 <> 안에다가 사용할 타입을 넘겨준다

	기본자료형(int, double, char,,,)을 쓸 수 없기 때문에
	기본자료형을 감싸는 클래스를 사용해야한다
	기본자료형을 감싸는 클래스를 랩퍼클래스 라고 한다
-------------------------------------------------------------------
  API(Application Programming Interface)
	내부 API
		자바 내부적으로 설치되는 API
		(만들어져 있는 클래스)
	외부 API
		외부 기업, 기관, 개인이 제공

Object클래스
	자바의 최상위 클래스
	모든 클래스는 Object클래스를 상속받아
	만들어져있다
	
	equals()
		논리적으로 동일한 객체를 판별하고 싶은 경우
		오버라이딩한다
	hashCode()
		논리적으로 동일한 객체는 동일한
		해시코드 값을 갖도록 오버라이딩한다
	toString()
		객체를 출력했을때의 모양을 설정하고 싶다면
		오버라이딩 한다
-------------------------------------------------------------------
랩퍼클래스
	기본자료형을 감싸는 클래스
	int	Integer
	double	Double
	char	Character
	boolean	Boolean
	....

박싱(boxing)
	기본자료형을 --> 랩퍼클래스 타입으로
언박싱(unboxing)
	랩퍼클래스타입(객체) --> 기본자료형값으로

String클래스
	문자열을 다루는데 사용되는 메소드
	charAt()
